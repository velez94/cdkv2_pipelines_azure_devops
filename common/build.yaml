#Build steps
# SAST for IaC

parameters:
- name: ServiceConnection
  type: string
  default: DevSecOpsServelessDeployment

- name: RegionName
  type: string
  default: us-east-2

- name: Project
  type: string
  default: DevSecOpsServelessDeployment

- name: CDKPath
  type: string
  default: .

- name: Environment
  type: string
  default: dev

- name: OnDemandTestEnv
  type: boolean
  default: false


- name: Language
  type: string
  default: python

- name:  AppPath
  type: string
  default: lambdas

- name:  Checkout
  type: string
  default: yes

- name:  PrivateRepository
  type: boolean
  default: false

- name:  AzureCustomFeed
  type: string
  default: a3dfeb18-d0fc-4033-99ae-50b8d724527b

- name: Listlambdas
  type: object
  default:
  - ReadMessage
  - SaveReadMessage
  -
- name:  ECSDeployment
  type: string
  default: no

steps:
- ${{ if eq(parameters.Checkout, 'none') }}:
    - checkout: none #skip checking out the default repository resource
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: '${{ parameters.Project }}-Build'
        patterns: '**/*'
        path: $(Build.SourcesDirectory)
    - script: |
        ls -all
        pwd
# dotnet
- ${{ if eq(parameters.Language, 'c#') }}:
  - script: |
      echo  'Build for environment Account - ' $(${{ parameters.Environment }}_account) 'Region-' $(${{ parameters.Environment }}_region)
      dotnet build src
    displayName: 'BuildDotnetProject'
    workingDirectory: ${{ parameters.CDKPath }}
    env:
      CDK_DEPLOY_ACCOUNT: $(${{ parameters.Environment }}_account)
      CDK_DEPLOY_REGION:  $(${{ parameters.Environment }}_region)
      ON_DEMAND_TEST_ENV: ${{ parameters.OnDemandTestEnv }}
    #Compile app for serveless projects
  - ${{ each value in parameters.Listlambdas }}:
    - script: | 
        echo ${{ value }} 
        dotnet build src/${{ parameters.AppPath }}/${{ value }}/src/${{ value }}/    
      displayName: 'Build Lambdas'
# python
- ${{ if eq(parameters.Language, 'python') }}:
  - script: |
      echo  'Build for environment Account Using Python - ' $(${{ parameters.Environment }}_account) 'Region-' $(${{ parameters.Environment }}_region)
      pip install -r requirements.txt
    displayName: 'BuildPythonProject'
    workingDirectory: ${{ parameters.CDKPath }}

    env:
      CDK_DEPLOY_ACCOUNT: $(${{ parameters.Environment }}_account)
      CDK_DEPLOY_REGION:  $(${{ parameters.Environment }}_region)
      ON_DEMAND_TEST_ENV: ${{ parameters.OnDemandTestEnv }}
# typescript
- ${{ if eq(parameters.Language, 'typescript') }}:
  - ${{ if eq(parameters.PrivateRepository, true) }}:
    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: ${{ parameters.CDKPath }}
        verbose: true
        #customRegistry: 'useFeed'
        #customFeed: ${{ parameters.AzureCustomFeed }}

  - script: |
      echo  'Build for environment Account Using typescript - ' $(${{ parameters.Environment }}_account) 'Region-' $(${{ parameters.Environment }}_region)
      npm install
      npm run build # compile ts to js
      npm run test # perform jest unit tests
    displayName: 'BuildTypescriptProject'
    workingDirectory: ${{ parameters.CDKPath }}
    env:
      CDK_DEPLOY_ACCOUNT: $(${{ parameters.Environment }}_account)
      CDK_DEPLOY_REGION:  $(${{ parameters.Environment }}_region)
      ON_DEMAND_TEST_ENV: ${{ parameters.OnDemandTestEnv }}

- task: AWSShellScript@1
  inputs:
    awsCredentials: ${{ parameters.ServiceConnection }}
    regionName: ${{ parameters.RegionName }}
    scriptType: 'inline'
    inlineScript: |      
     
      echo  'Synth for environment Account - ' $(${{ parameters.Environment }}_account) 'Region-' $(${{ parameters.Environment }}_region)
      if [[ ${{ parameters.ECSDeployment }} == yes ]]; then
          echo "ECS Deployment ..."
          cat ../version.txt
          export VERSION=`cat ../version.txt`
          echo $VERSION
      fi
      cdk synth
    displayName: 'CDK Synth'
    disableAutoCwd: true
    workingDirectory: ${{ parameters.CDKPath }}
  env:
    CDK_DEPLOY_ACCOUNT: $(${{ parameters.Environment }}_account)
    CDK_DEPLOY_REGION: $(${{ parameters.Environment }}_region)
    ON_DEMAND_TEST_ENV: ${{ parameters.OnDemandTestEnv }}

- script: |
    
    checkov -d cdk.out/ -o junitxml --output-file-path . -s #-s flag use soft mode
  displayName: 'SASTIaC'
  workingDirectory: ${{ parameters.CDKPath }}
  env:
    CDK_DEPLOY_ACCOUNT: $(${{ parameters.Environment }}_account)
    CDK_DEPLOY_REGION: $(${{ parameters.Environment }}_region)
    ON_DEMAND_TEST_ENV: ${{ parameters.OnDemandTestEnv }}
      
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit' # 'JUnit' | 'NUnit' | 'VSTest' | 'XUnit' | 'CTest'. Alias: testRunner. Required. Test result format. Default: JUnit.
    testResultsFiles: '**/results_junitxml.xml'
    mergeTestResults: true
    failTaskOnFailedTests: false
    testRunTitle: 'SAST IaC Checkov scan'
  condition: 'always()'


- task: AWSShellScript@1
  inputs:
    awsCredentials: ${{ parameters.ServiceConnection }}
    regionName: ${{ parameters.RegionName }}
    scriptType: 'inline'
    inlineScript: |      
     
      echo  'Diff for environment Account - ' $(${{ parameters.Environment }}_account) 'Region-' $(${{ parameters.Environment }}_region)
      pwd
      if [[ ${{ parameters.ECSDeployment }} == yes ]]; then
          echo "ECS Deployment ..."
          cat ../version.txt
          export VERSION=`cat ../version.txt`
          echo $VERSION
      fi
      cdk diff
    displayName: 'CDK Diff'
    disableAutoCwd: true
    workingDirectory: ${{ parameters.CDKPath }}

  env:
    CDK_DEPLOY_ACCOUNT: $(${{ parameters.Environment }}_account)
    CDK_DEPLOY_REGION:  $(${{ parameters.Environment }}_region)
    ON_DEMAND_TEST_ENV: ${{ parameters.OnDemandTestEnv }}
# Publish Package
- task: PublishPipelineArtifact@1
  displayName: PublishArtifact
  inputs:
    targetPath: '$(Build.SourcesDirectory)'
    artifactName: ${{ parameters.Project }}
