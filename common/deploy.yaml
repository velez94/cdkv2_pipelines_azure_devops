#Deploy app
parameters:
- name: ServiceConnection
  type: string
  default: DevSecOpsServelessDeployment

- name: RegionName
  type: string
  default: us-east-2

- name: Project
  type: string
  default: DevSecOpsServelessDeployment

- name: CDKPath
  type: string
  default: .

- name: Environment
  type: string
  default: dev

- name: OnDemandTestEnv
  type: boolean
  default: false

- name: Language
  type: string
  default: python

- name:  Action
  type: string
  default: deploy

steps:
- task: DownloadPipelineArtifact@2
  inputs:
    artifact:  ${{ parameters.Project }}
    patterns: '**/*'
    path: $(Build.SourcesDirectory)
- script: |
    ls -all
    pwd
- ${{ if eq(parameters.Language, 'python') }}:
  - script: |
      echo  'Build for environment Account Using Python - ' $(${{ parameters.Environment }}_account) 'Region-' $(${{ parameters.Environment }}_region)
      pip install -r requirements.txt
    displayName: 'BuildPythonProject'
    workingDirectory: ${{ parameters.CDKPath }}
    env:
      CDK_DEPLOY_ACCOUNT: $(${{ parameters.Environment }}_account)
      CDK_DEPLOY_REGION:  $(${{ parameters.Environment }}_region)
      ON_DEMAND_TEST_ENV: ${{ parameters.OnDemandTestEnv }}
      VERSION: $(VERSION)

- ${{ if eq(parameters.Language, 'typescript') }}:
  - script: |
      echo  'Build for environment Account Using typescript - ' $(${{ parameters.Environment }}_account) 'Region-' $(${{ parameters.Environment }}_region)
      rm -rf node_modules && npm install
      npm run build
    displayName: 'BuildTypescriptProject'
    workingDirectory: ${{ parameters.CDKPath }}
    env:
      CDK_DEPLOY_ACCOUNT: $(${{ parameters.Environment }}_account)
      CDK_DEPLOY_REGION:  $(${{ parameters.Environment }}_region)
      ON_DEMAND_TEST_ENV: ${{ parameters.OnDemandTestEnv }}
      VERSION: $(VERSION)

- task: AWSShellScript@1
  inputs:
    awsCredentials: ${{ parameters.ServiceConnection }}
    regionName: ${{ parameters.RegionName }}
    scriptType: 'inline'
    inlineScript: |
      echo 'Run ${{ parameters.Action }} in ' $CDK_DEPLOY_ACCOUNT $CDK_DEPLOY_REGION
      if [[ ${{ parameters.Action }} == destroy ]]; then
            cdk ${{ parameters.Action }} --force
      fi
      if [[ ${{ parameters.Action }} == deploy ]]; then
             cdk ${{ parameters.Action }} --require-approval never
      fi
     
    displayName: 'CDK  ${{ parameters.Action }}'
    workingDirectory: ${{ parameters.CDKPath }}
  env:
    CDK_DEPLOY_ACCOUNT: $(${{ parameters.Environment }}_account)
    CDK_DEPLOY_REGION:  $(${{ parameters.Environment }}_region)
    ON_DEMAND_TEST_ENV: ${{ parameters.OnDemandTestEnv }}
    VERSION: $(VERSION)